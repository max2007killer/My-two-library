

--[[
  GUI Library
  
  by [Your Name]
  
  This library contains functions and classes for creating graphical user interfaces (GUIs) in the Lua programming language.
  
--]]

--[[
  Class: GUI
  
  The base class for all GUIs.
  
  Properties:
    x (number) - The x coordinate of the GUI.
    y (number) - The y coordinate of the GUI.
    width (number) - The width of the GUI.
    height (number) - The height of the GUI.
    visible (boolean) - Whether the GUI is visible or not.
    children (table) - A list of the GUI's children (if any).
    parent (GUI) - The parent GUI (if any).
    
  Methods:
    draw() - Draws the GUI.
    update() - Updates the GUI.
    addChild(child) - Adds a child to the GUI.
    removeChild(child) - Removes a child from the GUI.
    show() - Makes the GUI visible.
    hide() - Hides the GUI.
    moveTo(x, y) - Moves the GUI to the given coordinates.
    resize(width, height) - Resizes the GUI to the given size.
    
--]]

-- GUI class
local GUI = {}
GUI.__index = GUI

function GUI:new(x, y, width, height)
  local gui = {
    x = x,
    y = y,
    width = width,
    height = height,
    visible = true,
    children = {},
    parent = nil
  }
  setmetatable(gui, self)
  return gui
end

function GUI:draw()
  -- Override this in subclasses
end

function GUI:update()
  -- Override this in subclasses
end

function GUI:addChild(child)
  table.insert(self.children, child)
  child.parent = self
end

function GUI:removeChild(child)
  for i,v in ipairs(self.children) do
    if v == child then
      table.remove(self.children, i)
      child.parent = nil
      break
    end
  end
end

function GUI:show()
  self.visible = true
end

function GUI:hide()
  self.visible = false
end

function GUI:moveTo(x, y)
  self.x = x
  self.y = y
end

function GUI:resize(width, height)
  self.width = width
  self.height = height
end

--[[
  Class: Button
  
  A GUI element that can be clicked.
  
  Properties:
    text (string) - The text displayed in the button.
    onClick (function) - The function to be called when the button is clicked.
  
  Methods:
    draw() - Draws the button.
    update() - Updates the button.
    onClick() - Calls the onClick function.
--]]

-- Button class
local Button = {}
Button.__index = Button

function Button:new(x, y, width, height, text, onClick)
  local button = GUI:new(x, y, width, height)
  setmetatable(button, self)
  button.text = text
  button.onClick = onClick
  return button
end

function Button:draw()
  love.graphics.setColor(255, 255, 255)
  love.graphics.rectangle("fill", self.x, self.y, self.width, self.height)
  love.graphics.setColor(0, 0, 0)
  love.graphics.printf(self.text, self.x, self.y + (self.height / 2) - 8, self.width, "center")
end

function Button:update()
  if self.visible then
    -- Check if mouse is over button
    local mouseX, mouseY = love.mouse.getPosition()
    if self.x <= mouseX and mouseX <= self.x + self.width and self.y <= mouseY and mouseY <= self.y + self.height then
      -- Check if mouse is clicked
      if love.mouse.isDown(1) then
        self:onClick()
      end
    end
  end
end

function Button:onClick()
  if self.onClick then
    self.onClick()
  end
end

--[[
  Class: Label
  
  A GUI element for displaying text.
  
  Properties:
    text (string) - The text to be displayed.
    font (Font) - The font to use for displaying the text.
    
  Methods:
    draw() - Draws the label.
    update() - Updates the label.
--]]

-- Label class
local Label = {}
Label.__index = Label

function Label:new(x, y, text, font)
  local label = GUI:new(x, y, 0, 0)
  setmetatable(label, self)
  label.text = text
  label.font = font
  return label
end

function Label:draw()
  love.graphics.setFont(self.font)
  love.graphics.setColor(255, 255, 255)
  love.graphics.print(self.text, self.x, self.y)
end

function Label:update()
  -- Nothing to do
end

--[[
  Class: Panel
  
  A GUI element for containing other GUI elements.
  
  Properties:
    backgroundColor (table) - The color of the panel's background.
    
  Methods:
    draw() - Draws the panel.
    update() - Updates the panel.
--]]

-- Panel class
local Panel = {}
Panel.__index = Panel

function Panel:new(x, y, width, height, backgroundColor)
  local panel = GUI:new(x, y, width, height)
  setmetatable(panel, self)
  panel.backgroundColor = backgroundColor
  return panel
end

function Panel:draw()
  love.graphics.setColor(self.backgroundColor)
  love.graphics.rectangle("fill", self.x, self.y, self.width, self.height)
end

function Panel:update()
  if self.visible then
    for i,v in ipairs(self.children) do
      v:update()
    end
  end
end

return {
  GUI = GUI,
  Button = Button,
  Label = Label,
  Panel = Panel
}

